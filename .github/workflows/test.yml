name: Test

on:
  push:
    branches:
      - main
      
  workflow_dispatch: 
   inputs:
      windows:
        type: boolean
        description: windows-latest
        default: true
      macos:
        type: boolean
        description: macos-latest
        default: true

  workflow_call:
    inputs:
      windows:
        required: true
        type: boolean
      macos:
        required: true
        type: boolean

env: 

  TOOL4D_URL: https://resources-download.4d.com/release/
  TOOL4D_PLATFORM: ""
  TOOL4D_BRANCH: 20.x
  TOOL4D_VERSION: 20.2
  TOOL4D_BUILD: latest 
  TOOL4D_SUFFIX: ""
  TOOL4D_EXECUTABLE_PATH: ""
  CURL_DOWNLOAD_URL: ""
  PROJECT_STARTUP_METHOD: test
  PROJECT_PATH: ./application/Project/application.4DProject
  
jobs:
  test: 
    strategy:
      matrix:
        os: [windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}   
    steps:
      - name: check platform windows
        if: ${{ (startsWith(matrix.os, 'windows')) && (inputs.windows || github.event_name != 'workflow_dispatch') }}
        run: |
          chcp 65001 #set code page to utf-8
          echo ("platform=$env:PLATFORM") >> $env:GITHUB_ENV
        env:
          PLATFORM: ${{ matrix.os }}
      - name: check platform macos
        if: ${{ (startsWith(matrix.os, 'macos')) && (inputs.macos || github.event_name != 'workflow_dispatch') }}
        run: |
          echo "platform=${PLATFORM}" >> $GITHUB_ENV
        env:
          PLATFORM: ${{ matrix.os }}
      - name: get tool4d
        id: get
        if: ${{ env.platform }}
        uses: ./.github/workflows/get-tool.yml
        with:
          platform: ${{ env.platform }}
          labels: ${{ toJSON(matrix.os) }}
          branch: ${{ env.TOOL4D_BRANCH }}
          version: ${{ env.TOOL4D_VERSION }}
          build: ${{ env.TOOL4D_BUILD }}

      - name: checkout repository
        if: ${{ env.platform }}
        uses: actions/checkout@v4
        
# end of generic code
# customise the fail condition here
# in the example below, we test the result log file

      - name: unit tests
        if: ${{ env.platform }}
        run: |
          ${TOOL4D_EXECUTABLE_PATH} ${PROJECT_PATH} --startup-method=${PROJECT_STARTUP_METHOD} --dataless
          UTestResult=`cat application/UTestResult.txt`
          value=`head -n 1 application/UTestResult.txt`
          rm application/UTestResult.txt
          if [ "$value" = "Unit tests failed" ]
          then
            exit 1
          fi
        shell: bash
        env:
          TOOL4D_EXECUTABLE_PATH: ${{ steps.get.outputs.tool4d_executable_path }}
          CURL_DOWNLOAD_URL: ${{ steps.get.outputs.tool4d_download_url }}
